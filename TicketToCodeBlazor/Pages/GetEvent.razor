@page "/event/{id:int}"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject EventService EventService
@inject NavigationManager Navigation
@inject BookingService BookingService


<div class="event-details-page">
    <button class="logo-button" @onclick="GoToHome">
        <svg viewBox="0 0 24 24">
            <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" />
        </svg>
    </button>

    @if (eventDetail == null)
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
            <p>Loading event details...</p>
        </div>
    }
    else
    {
        <div class="event-details-container">
            <div class="event-header">
                <h1 class="event-title">@eventDetail.Name</h1>
                <span class="event-type">@eventDetail.Type</span>
            </div>

            <div class="event-info-grid">
                <div class="info-card">
                    <div class="info-icon">📅</div>
                    <div class="info-content">
                        <h3>Date & Time</h3>
                        <p>Starts: @eventDetail.Start.ToString("MMM dd, yyyy HH:mm")</p>
                        <p>Ends: @eventDetail.End.ToString("MMM dd, yyyy HH:mm")</p>
                    </div>
                </div>

                <div class="info-card">
                    <div class="info-icon">👥</div>
                    <div class="info-content">
                        <h3>Capacity</h3>
                        <p>Limited to @eventDetail.MaxAttendees attendees</p>
                    </div>
                </div>
            </div>

            <div class="description-card">
                <h2>About This Event</h2>
                <p>@eventDetail.Description</p>
            </div>

            @if (!string.IsNullOrEmpty(responseMessage))
            {
                <div class="response-message @(isSuccess ? "success" : "error")">
                    @responseMessage
                </div>
            }

            <div class="action-buttons">
                <button class="btn-primary" @onclick="RegisterForEvent">Book a ticket</button>
                <button class="btn-secondary" @onclick="GoBack">Back to Events</button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private EventDto? eventDetail;
    private string responseMessage = "";
    private bool isSuccess = false;



    protected override async Task OnInitializedAsync()
    {
        eventDetail = await EventService.GetEventById(Id);
    }

    private async Task RegisterForEvent()
    {
        try
        {
            var booking = new BookingDto
            {
                UserId = 1, // hårdkodad användarID, hann inte fixa en riktig lösning.
                EventId = Id,
                TicketCount = 1,
                BookingDate = DateTime.Now
            };

            var bookingId = await BookingService.CreateBookingAsync(booking);
            if (bookingId.HasValue)
            {
                responseMessage = "Successfully booked a ticket for this event!";
                isSuccess = true;
            }
            else
            {
                responseMessage = "Failed to book a ticket. Please try again.";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            responseMessage = "An error occurred while booking. Please try again.";
            isSuccess = false;
            Console.WriteLine($"Error booking event: {ex.Message}");
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/events");
    }

    private void GoToHome()
    {
        Navigation.NavigateTo("/");
    }
}
