@page "/bookings"
@inject BookingService BookingService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthStateProvider

<AuthorizeView Roles="Admin">
    <Authorized>
        <div>
            <p>Logged in as @context.User.Identity?.Name. <button @onclick="Logout">Logout</button><span class="bi bi-door-closed-fill" aria-hidden="true" style="vertical-align:middle"></span> Logout</p>

            <h3>All Bookings</h3>

            @if (bookings == null)
            {
                <p>Loading bookings...</p>
            }
            else if (bookings.Count == 0)
            {
                <p>No bookings found.</p>
            }
            else
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Booking ID</th>
                            <th>User ID</th>
                            <th>Event ID</th>
                            <th>Ticket Count</th>
                            <th>Booking Date</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var booking in bookings)
                        {
                            <tr>
                                <td>@booking.Id</td>
                                <td>@booking.UserId</td>
                                <td>@booking.EventId</td>
                                <td>@booking.TicketCount</td>
                                <td>@booking.BookingDate</td>
                                <td>
                                    <button class="btn btn-danger" @onclick="() => DeleteBooking(booking.Id)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="boddy">
        <style>
            .boddy{
                background-color:black;
                height: 100%;
                width: 100%;
                
            }
            .warning {
                font-size: 100px;
                text-align: center;
                color: red;
            }
        </style>
        <p class="warning">Nothing to see here..</p>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<BookingDto>? bookings;

    protected override async Task OnInitializedAsync()
    {
        bookings = await BookingService.GetAllBookings();
        if (bookings == null) Console.WriteLine("Failed to load bookings.");
    }

    private async Task<bool> ConfirmDelete()
    {
        return await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this booking?");
    }

    private async Task DeleteBooking(int id)
    {
        if (!await ConfirmDelete()) return;
        var success = await BookingService.DeleteBooking(id);
        if (success)
        {
            bookings = await BookingService.GetAllBookings();
        }
        else
        {
            Console.WriteLine($"Delete failed for booking ID: {id}");
        }
    }
    private async Task Logout()
    {
        if (AuthStateProvider is CookieAuthenticationStateProvider cookieAuthProvider)
        {
            await cookieAuthProvider.LogoutAsync();
            Navigation.NavigateTo("/", forceLoad: true);
        }
        else
        {
            Console.WriteLine("AuthProvider is not CookieAuthenticationStateProvider");
        }
    }
 
}