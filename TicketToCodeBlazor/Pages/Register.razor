@page "/register"

@inject HttpClient HttpClient
@inject NavigationManager Navigation

<div class="register-page">
    <div class="register-container">
        <h1 class="register-title">Create Account</h1>
        <p class="register-subtitle">Join our community and start exploring amazing events</p>

        <div class="form-group">
            <label class="form-label">Username</label>
            <input @bind="username" class="form-control" placeholder="Enter your username" />
        </div>

        <div class="form-group">
            <label class="form-label">Password</label>
            <input @bind="password" type="password" class="form-control" placeholder="Enter your password" />
        </div>

        @if (!string.IsNullOrEmpty(responseMessage))
        {
            <div class="validation-message">@responseMessage</div>
        }

        <button @onclick="RegisterUser" class="btn-primary">Register</button>

        <div class="login-link">
            Already have an account? <a href="/login">Log in</a>
        </div>
    </div>
</div>

@code {
    private string username = "";
    private string password = "";
    private string responseMessage = "";

    private async Task RegisterUser()
    {
        if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))
        {
            responseMessage = "Username and password cannot be empty!";
            return;
        }
        try
        {
            var requestData = new
            {
                Username = username,
                Password = password
            };

            var response = await HttpClient.PostAsJsonAsync("https://localhost:7206/auth/register", requestData);

            if (response.IsSuccessStatusCode)
            {
                responseMessage = "Registration successful!";
                Navigation.NavigateTo("/login");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                responseMessage = $"Registration failed: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            responseMessage = $"An error occurred: {ex.Message}";
        }
    }
}
