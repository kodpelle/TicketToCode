@page "/register"
@using System.Text.Json
@inject HttpClient HttpClient
@inject NavigationManager Navigation

<div class="register-page">
    <button class="logo-button" @onclick="GoToHome">
        <svg viewBox="0 0 24 24">
            <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" />
        </svg>
    </button>

    <div class="register-container">
        <h1 class="register-title">Create Account</h1>
        <p class="register-subtitle">Join our community and start exploring amazing events</p>

        <form @onsubmit="RegisterUser">
            <div class="form-group">
                <label class="form-label">Email</label>
                <input @bind="email" class="form-control" placeholder="Enter your email" />
            </div>

            <div class="form-group">
                <label class="form-label">Password</label>
                <input @bind="password" type="password" class="form-control" placeholder="Enter your password" />
            </div>

            @if (!string.IsNullOrEmpty(responseMessage))
            {
                <div class="validation-message">@responseMessage</div>
            }

            <button type="submit" class="btn-primary">Register</button>
        </form>

        <div class="login-link">
            Already have an account? <a href="/login">Log in</a>
        </div>
    </div>
</div>

@code {
    private string email = "";
    private string password = "";
    private string responseMessage = "";

    private async Task RegisterUser()
    {
        if (string.IsNullOrWhiteSpace(email) || string.IsNullOrWhiteSpace(password))
        {
            responseMessage = "Username and password cannot be empty!";
            return;
        }
        try
        {
            var requestData = new
            {
                Email = email,
                Password = password
            };
            var response = await HttpClient.PostAsJsonAsync("https://localhost:7206/register", requestData);

            if (response.IsSuccessStatusCode)
            {
                responseMessage = "Registration successful!";
                Navigation.NavigateTo("/login");
            }
            else
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var errorMessages = ExtractErrorMessages(responseContent);
                responseMessage = string.Join(" ", errorMessages);
            }
            List<string> ExtractErrorMessages(string json)
            {
                var errorList = new List<string>();

                using (JsonDocument doc = JsonDocument.Parse(json))
                {
                    if (doc.RootElement.TryGetProperty("errors", out JsonElement errors))
                    {
                        foreach (var error in errors.EnumerateObject())
                        {
                            foreach (var message in error.Value.EnumerateArray()) // Hanterar arrayen av felmeddelanden
                            {
                                errorList.Add(message.GetString() ?? "Unknown error");
                            }
                        }
                    }
                }

                return errorList;
            }
        }
        catch (Exception ex)
        {
            responseMessage = $"An error occurred: {ex.Message}";
        }
    }

    private void GoToHome()
    {
        Navigation.NavigateTo("/");
    }
}
